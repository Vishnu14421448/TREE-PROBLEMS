
 Bubble sort:bubble values goes to the top.It takes n-1 iterations.
def bubble_sort(a):
    for phase in range(1,len(a)):
        #phase 1 
        for i in range(len(a)-phase): #here phase=1 so 6-1=5 
            if a[i]>a[i+1]:
                a[i],a[i+1]=a[i+1],a[i]
    return a         
a=[21,18,61,45,81,10]
print(bubble_sort(a))
#30 bubble_sort
def bubble_sort(a):
    for phase in range(1,len(a)):
        flag=0
        #phase 1 
        for i in range(len(a)-phase): #here phase=1 so 6-1=5 
            if a[i]>a[i+1]:
                flag=1
                a[i],a[i+1]=a[i+1],a[i]
        if flag==0: #if flag remains zero then stop program and got to for loop phase
            break
    return a
a=[21,18,61,45,81,10]
print(bubble_sort(a))
#31 selection_sort
def selection_sort(a):
    for phase in range(len(a)-1):
        min=phase
        #phase 1 
        for i in range(phase+1,len(a)): 
            if a[i]<a[min]:
                min=i
        if min!=phase: 
            a[min],a[phase]=a[phase],a[min]
    return a
a=[21,18,61,45,81,10]
print(selection_sort(a))	
#32 insertion_sort
def insertion_sort(a):
    for i in range(1,len(a)):
        j=i-1
        temp=a[i] #stores the copy of values of ith position
        while j>=0 and a[j]>temp:
            a[j+1]=a[j]
            j-=1 
        a[j+1]=temp
    return a
a=[21,18,61,45,81,10]
print(insertion_sort(a))    
#33 quick_sort
def quick_sort(a,s,e):
    if s<e:
        pivot_index = partition(a,s,e)
        quick_sort(a,s,pivot_index-1)
        quick_sort(a,pivot_index+1,e)
def partition(a,s,e):
    pivot = e
    l = e-1
    while s<=l:
        while a[s] < a[pivot]:
            s+=1
        while l>=0 and a[l]>= a[pivot]:
            l-=1
        if s<l: a[s] , a[l]  = a[l] ,a[s]
    if s>l:  a[s] , a[pivot] = a[pivot] , a[s]
    return s
a = [ 21 ,18,61,45,81,10]
print( quick_sort(a,0,len(a)-1) )
print(a)	
#34 
def Merge_sort(arr):
    if len(arr)==1:
         return
    mid = len(arr)//2
    left = arr[:mid]
    right = arr[mid:]
    Merge_sort(left)
    Merge_sort(right)

    k = i= j =0
    while i<len(left) and j<len(right):
        if left[i]<right[j]:
            arr[k] = left[i]
            i+=1
        else:
            arr[k] = right[j]
            j+=1
        k+=1
    while i<len(left):
        arr[k]=left[i]
        i+=1
        k+=1
    while j < len(right):
        arr[k] = right[j]
        j+=1
        k+=1
a = [ 21 ,18,61,45,81,10]
Merge_sort(a)
print(a)

